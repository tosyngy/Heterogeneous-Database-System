/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.xisysgroup.dbi;

import com.xisysgroup.dbi.variables.Dababase_variable;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author akisoft
 */
public class selectdbs extends javax.swing.JDialog {

    DefaultComboBoxModel combomodel;
    DefaultListModel listModel = new DefaultListModel();
    Vector<String> alltables = new Vector<String>();
    Vector<String> DbTablesColA = new Vector<String>();//firstt table coumns
    Vector<String> DbTablesColB = new Vector<String>();//secon table columns
    Vector<String> DbTablesColDesA = new Vector<String>();//firstt table coumns describ
    Vector<String> DbTablesColDesB = new Vector<String>();//secon table columns describe
    Vector<String> selectedtab = new Vector<String>();
    Vector<String> intcolumn = new Vector<String>();// new integrated table
    Vector<String> intcolumnDes = new Vector<String>();
    Vector<String> columnVal_A = new Vector<String>();//values from the first table
    Vector<String> columnVal_B = new Vector<String>();//values from the second table
    Vector<String> new_record = new Vector<String>();
    Vector<String> uinA = new Vector<String>();
    Vector<String> uinB = new Vector<String>();
    int special_indexA = 0;
    int special_indexB = 0;
    Object value;
    public static DefaultTableModel tab1;
    public static DefaultTableModel tab2;
    public static String opera;
    JTable jtable1;
    JTable jtable2;
    int x;

    /**
     * Creates new form selectdbs
     */
    public selectdbs(java.awt.Frame parent, boolean modal, JTable jtable1, JTable jtable2) {
        super(parent, modal);
        initComponents();
        this.jtable1 = jtable1;
        this.jtable2 = jtable2;
        loadalldb();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select tables to Integrate");

        jScrollPane1.setViewportView(jList1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Add Tables");

        jButton1.setText("Run Query");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Query");

        jLabel3.setText("Action");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "---------", "Generalize join", "Specialize join", "Merge" }));
        jComboBox2.setEnabled(false);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, 263, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        listModel.addElement(jComboBox1.getSelectedItem().toString());
        selectedtab.addElement(jComboBox1.getSelectedItem().toString());
        if (selectedtab.size() == 2) {
            jList1.setModel(listModel);
            jComboBox1.setEnabled(false);
            jComboBox2.setEnabled(true);

        }

// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed
    public Object getContent(String Datasource, String dbname, String sql, String dbtype, String user, String pass, int time, String evt) {
        try {

            Connection con;
            Statement st;
            ResultSet rs;

            String driver = null;

            if (dbtype.equals("mysql")) {
                driver = "com.mysql.jdbc.Driver";
            } else {
                driver = "org.postgresql.Driver";
            }
            Class.forName(driver);
            con = DriverManager.getConnection(Datasource + dbname, user, pass);
            st = con.createStatement();
            //String SQLCommand = "select * from akin";
            rs = st.executeQuery(sql);
            ResultSetMetaData md = rs.getMetaData();

            int nColumns = md.getColumnCount();

            System.out.println(nColumns);
            while (rs.next()) {
                String data[] = new String[nColumns];

                if (evt.equalsIgnoreCase("Special") || evt.equalsIgnoreCase("Mergy")) {
                    data = new String[intcolumn.size()];
                    for (int i = 0; i < intcolumn.size(); i++) {
                        System.out.println(" times her is " + i);
                        for (int j = 1; j <= md.getColumnCount(); j++) {
                            if (md.getColumnLabel(j).equals(intcolumn.elementAt(i).toString())) {
                                data[i] = rs.getString(intcolumn.elementAt(i).toString());
                                break;
                            } else {
                                data[i] = "null";

                            }
                        }

                    }

                } else {
                    x = nColumns;
                    for (int i = 1; i <= nColumns; i++) {
                        data[i - 1] = rs.getString(i);
                        System.out.println("result rs" + rs.getString(i));
                    }
                }

                tab1.addRow(data);
            }
//            con.close();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("addobject " + e);
        }
        return value;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String sqlquery = "", sqldb = "";
        String postquery = "", postdb = "";
        int sqlsite = -1;
        int postsite = -1;
        int y = 0;

        for (int i = 0; i < selectedtab.size(); i++) {
            System.out.println("site count " + i);
            StringBuffer sb = new StringBuffer();
            String sitename = null;
            String database = null;
            String table = null;
            int counter = 0;
            char params[] = new char[selectedtab.elementAt(i).toString().length()];
            params = selectedtab.elementAt(i).toString().toCharArray();
            for (int k = 0; k < params.length; k++) {
                if (params[k] != '.') {
                    sb.append(params[k]);
                } else {
                    if (counter == 0) {
                        sitename = sb.toString();
                        System.out.println("Site name " + sitename);

                        counter = counter + 1;
                        sb.delete(0, sb.length());
                    } else if (counter == 1) {
                        database = sb.toString();
                        counter = counter + 1;
                        System.out.println("Database " + database);
                        sb.delete(0, sb.length());
                    } else {
                        table = sb.toString();
                        System.out.println("table " + table);
                    }
                }

            }
            String url = null;
            int index = Dababase_variable.DbEngineName.indexOf(sitename);
            if (Dababase_variable.DbEngineType.elementAt(index).equals("mysql")) {
                sqlquery += table;
                sqldb = database;
                sqlsite = index;
                System.out.println("sqlquery " + sqlquery);
                url = "jdbc:mysql://" + Dababase_variable.DbEngineUrl.elementAt(index) + "/";

            } else if (Dababase_variable.DbEngineType.elementAt(index).equals("psql")) {
                postquery += table;
                postdb = database;
                postsite = index;
                System.out.println("post query " + postquery);
                url = "jdbc:postgresql://" + Dababase_variable.DbEngineUrl.elementAt(index) + ":5432/";
            }
            System.out.println("it got here >>>>>");
            getColumnName(url, database, Dababase_variable.DbEngineUser.elementAt(index), Dababase_variable.DbEnginePass.elementAt(index), table, Dababase_variable.DbEngineType.elementAt(index), i);

        }

        if (jTextArea1.getText().contains("Generalize")) {
            generanilize_join();
            opera = "Generalize Join Operation";
            tab1 = new DefaultTableModel();
            tab2 = new DefaultTableModel();
            tab2.addColumn("Column Name");
            tab2.addColumn("Column Type");
            String psquery = "Select  ";
            String sqquery = "Select  ";
            for (int i = 0; i < intcolumn.size(); i++) {
                Object data[] = {intcolumn.elementAt(i), intcolumnDes.elementAt(i)};
                sqquery += intcolumn.elementAt(i) + ", ";
                psquery += "\"" + intcolumn.elementAt(i) + "\", ";
                tab2.addRow(data);
            }
            sqquery = sqquery.substring(0, sqquery.length() - 2);
            sqquery += " From " + sqlquery;
            psquery = psquery.substring(0, psquery.length() - 2);
            psquery += " From " + "\"" + postquery + "\"";
            System.out.println("post " + psquery);
            System.out.println("sql " + sqquery);
            for (int i = 0; i < intcolumn.size(); i++) {
                tab1.addColumn(intcolumn.elementAt(i));
                System.out.println("New: " + intcolumn.elementAt(i));
            }
            getContent("jdbc:postgresql://" + Dababase_variable.DbEngineUrl.elementAt(postsite) + ":5432/", postdb, psquery, "postgresql", "postgres", "root", ++y, "Generalize");
            getContent("jdbc:mysql://" + Dababase_variable.DbEngineUrl.elementAt(sqlsite) + "/", sqldb, sqquery, "mysql", "root", "", ++y, "Generalize");

            jtable1.setModel(tab2);
            jtable2.setModel(tab1);

            Mainframe.jTextArea1.setText(jTextArea1.getText());
            new resultPane(null, rootPaneCheckingEnabled).setVisible(true);
            this.dispose();
            return;
        } else if (jTextArea1.getText().contains("Merge")) {
            merge_join();
            opera = "Merge Operation";
            tab1 = new DefaultTableModel();
            tab2 = new DefaultTableModel();
            tab2.addColumn("Column Name");
            tab2.addColumn("Column Type");
            String psquery = "Select ";
            String sqquery = "Select ";
            for (int i = 0; i < intcolumn.size(); i++) {
                Object data[] = {intcolumn.elementAt(i), intcolumnDes.elementAt(i)};
                if (postsite == 0) {
                    if (DbTablesColA.contains(intcolumn.elementAt(i))) {
                        psquery += "\"" + intcolumn.elementAt(i) + "\", ";
                    }
                    if (DbTablesColB.contains(intcolumn.elementAt(i))) {
                        sqquery += intcolumn.elementAt(i) + ", ";
                    }
                } else {
                    if (DbTablesColA.contains(intcolumn.elementAt(i))) {
                        sqquery += intcolumn.elementAt(i) + ", ";
                    }
                    if (DbTablesColB.contains(intcolumn.elementAt(i))) {
                        psquery += "\"" + intcolumn.elementAt(i) + "\", ";
                    }
                }

                tab2.addRow(data);
            }
            sqquery = sqquery.substring(0, sqquery.length() - 2);
            sqquery += " From " + sqlquery;
            psquery = psquery.substring(0, psquery.length() - 2);
            psquery += " From " + "\"" + postquery + "\"";
            System.out.println("post " + psquery);
            System.out.println("sql " + sqquery);
            for (int i = 0; i < intcolumn.size(); i++) {
                tab1.addColumn(intcolumn.elementAt(i));
                System.out.println("New: " + intcolumn.elementAt(i));
            }

            getContent("jdbc:postgresql://" + Dababase_variable.DbEngineUrl.elementAt(postsite) + ":5432/", postdb, psquery, "postgresql", "postgres", "root", ++y, "Mergy");
            getContent("jdbc:mysql://" + Dababase_variable.DbEngineUrl.elementAt(sqlsite) + "/", sqldb, sqquery, "mysql", "root", "", ++y, "Mergy");

            jtable1.setModel(tab2);
            jtable2.setModel(tab1);

            Mainframe.jTextArea1.setText(jTextArea1.getText());
            new resultPane(new javax.swing.JFrame(), true).setVisible(true);
            this.dispose();
            return;

        } else if (jTextArea1.getText().contains("Special")) {

            opera = "Specialize Join Operation";
            if (Specialized()) {

//            tab1 = new DefaultTableModel();
//            tab2 = new DefaultTableModel();
//            tab2.addColumn("Column Name");
//            tab2.addColumn("Column Type");
//            String psquery = "Select ";
//            String sqquery = "Select ";
//            for (int i = 0; i < intcolumn.size(); i++) {
//                Object data[] = {intcolumn.elementAt(i), intcolumnDes.elementAt(i)};
//                if (postsite == 0) {
//                    if (DbTablesColA.contains(intcolumn.elementAt(i))) {
//                        psquery += intcolumn.elementAt(i) + ", ";
//                    } else if (DbTablesColB.contains(intcolumn.elementAt(i))) {
//                        sqquery += intcolumn.elementAt(i) + ", ";
//                    }
//                } else {
//                    if (DbTablesColA.contains(intcolumn.elementAt(i))) {
//                        sqquery += intcolumn.elementAt(i) + ", ";
//                    } else if (DbTablesColB.contains(intcolumn.elementAt(i))) {
//                        psquery += intcolumn.elementAt(i) + ", ";
//                    }
//                }
//
//
//                tab2.addRow(data);
//            }
//            sqquery = sqquery.substring(0, sqquery.length() - 2);
//            sqquery += " From " + sqlquery;
//            psquery = psquery.substring(0, psquery.length() - 2);
//            psquery += " From " + "\"" + postquery + "\"";
//            System.out.println("post " + psquery);
//            System.out.println("sql " + sqquery);
//            for (int i = 0; i < intcolumn.size(); i++) {
//                tab1.addColumn(intcolumn.elementAt(i));
//                System.out.println("New: " + intcolumn.elementAt(i));
//            }
                tab1 = new DefaultTableModel();
                tab2 = new DefaultTableModel();
                tab2.addColumn("Column Name");
                tab2.addColumn("Column Type");
                String psquery = "Select ";
                String sqquery = "(";
                for (int i = 0; i < intcolumn.size(); i++) {
                    Object data[] = {intcolumn.elementAt(i), intcolumnDes.elementAt(i)};

                    if (DbTablesColA.contains(intcolumn.elementAt(i)) && DbTablesColB.contains(intcolumn.elementAt(i))) {
                        psquery += "\"" + intcolumn.elementAt(i) + "\", ";
                        sqquery += intcolumn.elementAt(i) + "=!";
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "COLUMNS ON BOTH TABLES ARE DIFFERENT");
                        Mainframe.jTextArea1.setText(jTextArea1.getText());
                        this.dispose();
                        return;
                    }

                    tab2.addRow(data);
                }
                for (int i = 0; i < intcolumn.size(); i++) {
                    tab1.addColumn(intcolumn.elementAt(i));
                    System.out.println("New: " + intcolumn.elementAt(i));
                }
                psquery = psquery.substring(0, psquery.length() - 2);
                psquery += " From " + "\"" + postquery + "\"";
                psquery = psquery.replaceFirst("\"id\",", "");
                psquery = psquery.replaceFirst("\"ID\",", "");
                System.out.println("post " + psquery);
                sqquery = sqquery.replaceFirst("id=!", "");
                sqquery = sqquery.replaceFirst("ID=!", "");
                System.out.println("new querry  " + sqquery);
                getContentSpec(sqlsite, sqldb, sqlquery, sqquery, psquery);
//                sqquery = sqquery.substring(0, sqquery.length() - 2);
//                sqquery += " From " + sqlquery;

//                System.out.println("sql " + sqquery);
//                getContent("jdbc:postgresql://" + Dababase_variable.DbEngineUrl.elementAt(postsite) + ":5432/", postdb, psquery, "postgresql", "postgres", "gmjgtpgdgtm", ++y, "Special");
//                getContent("jdbc:mysql://" + Dababase_variable.DbEngineUrl.elementAt(sqlsite) + "/", sqldb, sqquery, "mysql", "root", "", ++y, "Special");
                jtable1.setModel(tab2);
                jtable2.setModel(tab1);
                Mainframe.jTextArea1.setText(jTextArea1.getText());
                new resultPane(new javax.swing.JFrame(), true).setVisible(true);
                this.dispose();
                return;
            } else {
                Mainframe.jTextArea1.setText(jTextArea1.getText());
                this.dispose();
            }
        }

        tab1 = new DefaultTableModel();
        tab2 = new DefaultTableModel();
        tab2.addColumn("Column Name");
        tab2.addColumn("Column Type");

        for (int i = 0; i < intcolumn.size(); i++) {
            Object data[] = {intcolumn.elementAt(i), intcolumnDes.elementAt(i)};
            tab2.addRow(data);
        }

        jtable1.setModel(tab2);
        for (int i = 0; i < intcolumn.size(); i++) {
            tab1.addColumn(intcolumn.elementAt(i));
            System.out.println("New: " + intcolumn.elementAt(i));
        }

//        savea();
//        saveb();
        //
//        rowcounter=1;
//        for(int i =0; i<intcolumn.size();i++){
//           if(DbTablesColB.contains(intcolumn.elementAt(i))){
//               int num=DbTablesColB.indexOf(intcolumn.elementAt(i));
//               new_record.addElement(columnVal_B.elementAt(num*rowcounter));
//               //rowcounter=rowcounter+1;
//           }else{
//               new_record.addElement("");
//           }
//
//        }
//        tab1.addRow(new_record);
        //new_record.removeAllElements();
        jtable2.setModel(tab1);
        System.out.println("get here>>3");
        Mainframe.jTextArea1.setText(jTextArea1.getText());

        this.dispose();

        //selectedtab.// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed

        jTextArea1.setText(jComboBox2.getSelectedItem().toString() + " " + selectedtab.elementAt(0) + " with " + selectedtab.elementAt(1));
        jComboBox2.removeItemAt(jComboBox2.getSelectedIndex());// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    //main method deleted
    final void loadalldb() {
        combomodel = new DefaultComboBoxModel();
        try {
            Connection con;
            for (int i = 0; i < Dababase_variable.DbEngineType.size(); i++) {
                System.out.println("dbtype: " + Dababase_variable.DbEngineType.elementAt(i));
                if (Dababase_variable.DbEngineType.elementAt(i).equals("mysql")) {
                    try {
                        Class.forName("com.mysql.jdbc.Driver");
                        con = DriverManager.getConnection("jdbc:mysql://" + Dababase_variable.DbEngineUrl.elementAt(i) + "/", Dababase_variable.DbEngineUser.elementAt(i), Dababase_variable.DbEnginePass.elementAt(i));
                        try {
                            ResultSet rs = con.getMetaData().getCatalogs();
                            String db;
                            while (rs.next()) {

                                //System.out.println("counting ");
                                //System.out.println(rs.getString("TABLE_CAT"));
                                if (!(rs.getString("TABLE_CAT").equals("information_schema") || rs.getString("TABLE_CAT").equals("mysql"))) {
                                    GetTable("jdbc:mysql://" + Dababase_variable.DbEngineUrl.elementAt(i) + "/", rs.getString("TABLE_CAT").toString(), Dababase_variable.DbEngineUser.elementAt(i), Dababase_variable.DbEnginePass.elementAt(i), "mysql", Dababase_variable.DbEngineName.elementAt(i));
                                    // GetTable("jdbc:postgresql://" + Dababase_variable.DbEngineUrl.elementAt(i) + ":5432/", "postgres", "postgres"/*Dababase_variable.DbEngineUser.elementAt(i)*/,"root" /*Dababase_variable.DbEnginePass.elementAt(i)*/, "psql", Dababase_variable.DbEngineName.elementAt(i));

                                }

                            }

                        } catch (SQLException s) {
                            System.out.println("No any table in the database");
                        }
                        con.close();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {//this where to comment ems
                    GetTable("jdbc:postgresql://" + Dababase_variable.DbEngineUrl.elementAt(i) + ":5432/", "FPI_Student", Dababase_variable.DbEngineUser.elementAt(i), Dababase_variable.DbEnginePass.elementAt(i), "psql", Dababase_variable.DbEngineName.elementAt(i));

                }

            }
        } catch (Exception e) {
            System.out.println("" + e);
        }
        combomodel.addElement("--------");
        for (int i = 0; i < alltables.size(); i++) {
            combomodel.addElement(alltables.elementAt(i));

        }
        jComboBox1.setModel(combomodel);
    }

    public void GetTable(String Datasource, String dbname, String user, String pass, String dbtype, String engineName) {

        System.out.println("Listing all table name in Database!");
        Connection con = null;
        String url = Datasource;
        String db = dbname;
        String driver = null;
//        if (dbtype.equals("mysql")) {
//            driver = "com.mysql.jdbc.Driver";
//        } else if (dbtype.equals("psql")) {
//            driver = "org.postgresql.Driver";
//
//        }

        if (dbtype.equals("mysql")) {
            driver = "com.mysql.jdbc.Driver";
            try {
                Class.forName(driver);
                con = DriverManager.getConnection(url + db, user, pass);
                //con.close();

            } catch (Exception ex) {
                Logger.getLogger(AllTableName.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (dbtype.equals("psql")) {
            try {
                driver = "org.postgresql.Driver";
                Class.forName(driver);
                System.out.println(url + db + user + pass);
//                con = DriverManager.getConnection(url + db, user, pass);
//con.close();

                System.out.println("All tables connectd");
            } catch (Exception ex) {
                Logger.getLogger(AllTableName.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
//        String user = "root";
//        String pass = "";
        try {
            Class.forName(driver);
            con = DriverManager.getConnection(url + db, user, pass);
            try {
                DatabaseMetaData dbm = con.getMetaData();
                String[] types = {"TABLE"};
                ResultSet rs = dbm.getTables(null, null, "%", types);
                System.out.println("Table name:");

                while (rs.next()) {
                    //counter=counter+1;
                    String table = rs.getString("TABLE_NAME");
                    alltables.addElement(engineName + "." + db + "." + table + ".");
                    System.out.println(db + "." + table);
                }
                con.close();

            } catch (SQLException s) {
                System.out.println("No any table in the database");
            }
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void getColumnName(String Datasource, String dbname, String user, String pass, String table, String dbtype, int SiteCount) {
        Connection con;
        Statement st;
        ResultSet rs;

        String driver = null;
        try {
//            switch (dbtype) {
//                case "mysql":
//                    driver = "com.mysql.jdbc.Driver";
//                    break;
//                case "psql":
//                    driver = "org.postgresql.Driver";
//                    break;
//            }
            String sql = "";

            if (dbtype.equals("mysql")) {
                driver = "com.mysql.jdbc.Driver";
                sql = "SELECT * FROM " + table;
            } else {
                driver = "org.postgresql.Driver";
                sql = "SELECT * FROM " + "\"" + table + "\"";
            }
            Class.forName(driver);
            con = DriverManager.getConnection(Datasource + dbname, user, pass);
            System.out.println("sql " + sql);
            try {
                st = con.createStatement();
                rs = st.executeQuery(sql);
                ResultSetMetaData md = rs.getMetaData();
                int col = md.getColumnCount();
                System.out.println("Number of Column : " + col);
                System.out.println("Columns Name: ");
                int counter = 0;
                for (int i = 1; i <= col; i++) {
                    counter = counter + 1;
                    String col_name = md.getColumnName(i);
                    if (SiteCount == 0) {
                        DbTablesColA.addElement(col_name);
                        String col_data_type = md.getColumnTypeName(i);
                        DbTablesColDesA.addElement(col_data_type);
                        System.out.println(col_name + " " + col_data_type);
                    } else if (SiteCount == 1) {
                        DbTablesColB.addElement(col_name);
                        String col_data_type = md.getColumnTypeName(i);
                        DbTablesColDesB.addElement(col_data_type);
                        System.out.println(col_name + " " + col_data_type);
                    }

                }
                for (int l = 0; l < Dababase_variable.DbTablesCol.size(); l++) {
                    System.out.println("enter addcolumn");

                }

                addobject(Datasource, dbname, sql, dbtype, user, pass, SiteCount);
                con.close();
            } catch (SQLException s) {
                System.out.println("not executed!" + s);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Object addobject(String Datasource, String dbname, String sql, String dbtype, String user, String pass, int SiteCount) {
        try {

            Connection con;
            Statement st;
            ResultSet rs;

            String driver = null;

//            switch (dbtype) {
//                case "mysql":
//                    driver = "com.mysql.jdbc.Driver";
//                    break;
//                case "psql":
//                    driver = "org.postgresql.Driver";
//                    break;
//            }
            if (dbtype.equals("mysql")) {
                driver = "com.mysql.jdbc.Driver";
            } else {
                driver = "org.postgresql.Driver";
            }
            Class.forName(driver);
            con = DriverManager.getConnection(Datasource + dbname, user, pass);
            st = con.createStatement();
            //String SQLCommand = "select * from akin";
            rs = st.executeQuery(sql);
            ResultSetMetaData md = rs.getMetaData();
            int nColumns = md.getColumnCount();
            System.out.println("" + nColumns);
            System.out.println(nColumns);
            String test = "";
            int counter = 0;
            while (rs.next()) {
                //rowData = new String[nColumns];
                for (int i = 0; i < nColumns; i++) {
                    counter = counter + 1;

                    if (counter != nColumns) {
                        if (SiteCount == 0) {
                            columnVal_A.addElement(rs.getObject(i + 1).toString());

                        } else if (SiteCount == 1) {
                            columnVal_B.addElement(rs.getObject(i + 1).toString());
                        }
                        test = test + rs.getObject(i + 1).toString() + " ";

                    } else {
                        if (SiteCount == 0) {
                            columnVal_A.addElement(rs.getObject(i + 1).toString());
                        } else if (SiteCount == 1) {
                            columnVal_B.addElement(rs.getObject(i + 1).toString());
                        }
                        test = test + rs.getObject(i + 1).toString() + " ";
                        System.out.println("test  " + test);
                        test = "";
                        //datas=null;
                        counter = 0;
                    }

                    //rowData[i] = rs.getObject(i+1).toString();
                    //data.addElement(rowData[i]);
                    //System.out.println("card "+rowData[i]);
                }
            }
            if (SiteCount == 0) {
                for (int i = 0; i < columnVal_A.size(); i++) {
                    System.out.println("save A: " + columnVal_A.elementAt(i));

                }
            } else {
                for (int i = 0; i < columnVal_B.size(); i++) {
                    System.out.println("save B: " + columnVal_B.elementAt(i));

                }
            }
            con.close();
            System.out.println("column A:  " + columnVal_A.size());
        } catch (Exception e) {
            System.out.println("addobject " + e);
        }
        return value;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public void savea() {
        try {
            int rowcounter = 0;

            System.out.println("colu a size " + columnVal_A.size());
            //
            for (int l = 0; l < (columnVal_A.size() / DbTablesColA.size()); l++) {
                Object[] obj = new Object[intcolumn.size()];
                //JOptionPane.showMessageDialog(rootPane, "A is >"+ intcolumn.size()+" "+(columnVal_A.size() / DbTablesColA.size()));
                if (intcolumn.size() < (DbTablesColA.size())) {
                    //JOptionPane.showMessageDialog(rootPane, "int>>>>> "+intcolumn.size()+" "+DbTablesColA.size());
                    for (int i = 0; i < intcolumn.size(); i++) {
                        if (intcolumn.contains(DbTablesColA.elementAt(i))) {
                            int num = DbTablesColA.indexOf(intcolumn.elementAt(i));
                            System.out.println("num_index " + rowcounter);
                            //new_record.addElement(columnVal_A.elementAt(num*rowcounter));
                            obj[i] = columnVal_A.elementAt(rowcounter);
                            rowcounter = rowcounter + 1;
                            //rowcounter=rowcounter+1;
                        } else {
                            //rowcounter = rowcounter + 1;
                            //obj[i]="null";
                        }
                    }
                    rowcounter = rowcounter + Math.abs(intcolumn.size() - DbTablesColA.size());

                } else {
                    //JOptionPane.showMessageDialog(rootPane, "int>>>>>a "+intcolumn.size()+" "+columnVal_A.size());

                    for (int i = 0; i < intcolumn.size(); i++) {
                        if (DbTablesColA.contains(intcolumn.elementAt(i))) {
                            int num = DbTablesColA.indexOf(intcolumn.elementAt(i));
                            System.out.println("num_index " + rowcounter);
                            //new_record.addElement(columnVal_A.elementAt(num*rowcounter));
                            obj[i] = columnVal_A.elementAt(rowcounter);
                            rowcounter = rowcounter + 1;
                            //rowcounter=rowcounter+1;
                        } else {
                            obj[i] = "null";
                        }
                    }
                }

//        if(DbTablesColA.size()!=intcolumn.size()){
//            rowcounter=rowcounter-Math.abs(intcolumn.size()-DbTablesColA.size());
//        }
                //
                tab1.addRow(obj);
            }
////
        } catch (Exception e) {
            System.out.println("savea 0" + e);
        }
    }

    public void saveb() {
        try {
            int rowcounter = 0;

            System.out.println("colu a size " + columnVal_A.size());
            //
            for (int l = 0; l < (columnVal_B.size() / DbTablesColB.size()); l++) {

                Object[] obj = new Object[intcolumn.size()];

                if (intcolumn.size() < (DbTablesColB.size())) {
                    // JOptionPane.showMessageDialog(rootPane, "B is >"+ intcolumn.size()+" "+(DbTablesColB.size()));

                    for (int i = 0; i < intcolumn.size(); i++) {
                        if (intcolumn.contains(DbTablesColB.elementAt(i))) {
                            System.out.println("num_index for b " + rowcounter);
                            //new_record.addElement(columnVal_A.elementAt(num*rowcounter));
                            obj[i] = columnVal_B.elementAt(rowcounter);
                            rowcounter = rowcounter + 1;
                            //JOptionPane.showMessageDialog(rootPane, "is there"+DbTablesColB.elementAt(i));
                            System.out.println("is there");

                            //rowcounter=rowcounter+1;
                        } else {
                            System.out.println("is not there");
                            //JOptionPane.showMessageDialog(rootPane, "is not there "+DbTablesColB.elementAt(i));

                            //rowcounter = rowcounter + 2;
                            //obj[i]="null";
                        }

                    }
                    rowcounter = rowcounter + Math.abs(intcolumn.size() - DbTablesColB.size());

                } else {
                    //JOptionPane.showMessageDialog(rootPane, "B is <"+ intcolumn.size()+" "+(DbTablesColB.size()));
                    for (int i = 0; i < intcolumn.size(); i++) {
                        if (DbTablesColB.contains(intcolumn.elementAt(i))) {
                            System.out.println("num_index " + rowcounter);
                            //new_record.addElement(columnVal_A.elementAt(num*rowcounter));
                            obj[i] = columnVal_B.elementAt(rowcounter);
                            rowcounter = rowcounter + 1;

                            //rowcounter=rowcounter+1;
                        } else {
                            obj[i] = "null";
                        }

                    }
                }

//        if(DbTablesColB.size()!=intcolumn.size()){
//            rowcounter=rowcounter+Math.abs(intcolumn.size()-DbTablesColB.size());
//        }
                //
                tab1.addRow(obj);
            }
////
        } catch (Exception e) {
            System.out.println("savea 0" + e);
        }
    }

    private void generanilize_join() {

        for (int i = 0; i < DbTablesColB.size(); i++) {
//            for (int j = 0; j < DbTablesColB.size(); j++) {
////            intcolumn.addElement(DbTablesColB.elementAt(j));
////            intcolumnDes.addElement(DbTablesColDesB.elementAt(DbTablesColB.indexOf(DbTablesColB.elementAt(j))));
//            if (DbTablesColA.contains(DbTablesColB.elementAt(i))) {
//                intcolumn.addElement(DbTablesColB.elementAt(i));
//                intcolumnDes.addElement(DbTablesColDesB.elementAt(DbTablesColB.indexOf(DbTablesColB.elementAt(i))));
////                    intcolumn.addElement(DbTablesColA.elementAt(i));
////                    intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
//                //intcolumnDes.addElement(intcolumn.elementAt(DbTablesColDesA.indexOf(DbTablesColA.elementAt(i))));
//            }
//            }
        }
        for (int i = 0; i < DbTablesColA.size(); i++) {
            if (DbTablesColB.contains(DbTablesColA.elementAt(i))) {
                if (!intcolumn.contains(DbTablesColA.elementAt(i))) {
                    intcolumn.addElement(DbTablesColA.elementAt(i));
                    intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
                }
            }
        }
        System.out.println("jay says intcolumn " + intcolumn.size() + " jay also says intcolumnDes " + intcolumnDes.size());
    }

    private void merge_join() {
        for (int i = 0; i < DbTablesColB.size(); i++) {
            intcolumn.addElement(DbTablesColB.elementAt(i));
            intcolumnDes.addElement(DbTablesColDesB.elementAt(DbTablesColB.indexOf(DbTablesColB.elementAt(i))));
        }

        for (int i = 0; i < DbTablesColA.size(); i++) {
            if (!intcolumn.contains(DbTablesColA.elementAt(i))) {
                intcolumn.addElement(DbTablesColA.elementAt(i));
                intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
                //intcolumnDes.addElement(intcolumn.elementAt(DbTablesColDesA.indexOf(DbTablesColA.elementAt(i))));
            }
        }

//        for (int i = 0; i < intcolumn.size(); i++) {
//            if (!DbTablesColA.contains(intcolumn.elementAt(i))) {
//                intcolumn.removeElementAt(intcolumn.indexOf(intcolumn.elementAt(i)));
//                intcolumnDes.removeElementAt(intcolumnDes.indexOf(intcolumn.elementAt(i)));
//                System.out.println("remove " + intcolumn.elementAt(i));
//                //intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
//                //intcolumnDes.addElement(intcolumn.elementAt(DbTablesColDesA.indexOf(DbTablesColA.elementAt(i))));
//            }
//        }
        System.out.println("my Own DeBugg ++++++++++++++++++++");
        System.out.println(intcolumn.size());
        for (int i = 0; i < intcolumn.size(); i++) {
            String string = intcolumn.elementAt(i);
            System.out.println("Column Name " + string);

        }
        System.out.println("my Own DeBugg ++++++++++++++++++++");

//        for (int i = 0; i < intcolumn.size(); i++) {
//            if (!DbTablesColB.contains(intcolumn.elementAt(i))) {
//                System.out.println("affected " + intcolumn.elementAt(i));
//                int index = intcolumnDes.indexOf(intcolumn.elementAt(i));
//                intcolumn.removeElement(intcolumn.elementAt(i));
////                intcolumnDes.removeElementAt(index);
//                //System.out.println("remove "+intcolumn.elementAt(i));
//                //intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
//                //intcolumnDes.addElement(intcolumn.elementAt(DbTablesColDesA.indexOf(DbTablesColA.elementAt(i))));
//            }
//        }
//        for (int i = 0; i < intcolumn.size(); i++) {
//            if (!DbTablesColA.contains(intcolumn.elementAt(i))) {
//                System.out.println("affected " + intcolumn.elementAt(i));
//                int index = intcolumnDes.indexOf(intcolumn.elementAt(i));
//                intcolumn.removeElement(intcolumn.elementAt(i));
//
////                intcolumnDes.removeElementAt(index);
//                //System.out.println("remove "+intcolumn.elementAt(i));
//                //intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
//                //intcolumnDes.addElement(intcolumn.elementAt(DbTablesColDesA.indexOf(DbTablesColA.elementAt(i))));
//            }
//        }
        System.out.println("final size after merge " + intcolumn.size());
    }

    private boolean Specialized() {
//        Vector<String> notC = new Vector<String>();
//        for (int i = 0; i < DbTablesColA.size(); i++) {
////            intcolumn.addElement(DbTablesColB.elementAt(j));
////            intcolumnDes.addElement(DbTablesColDesB.elementAt(DbTablesColB.indexOf(DbTablesColB.elementAt(j))));
//            if (!DbTablesColB.contains(DbTablesColA.elementAt(i))) {
//                intcolumn.addElement(DbTablesColA.elementAt(i));
//                intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
//            }
//        }
//
//        for (int i = 0; i < DbTablesColB.size(); i++) {           if (!DbTablesColA.contains(DbTablesColB.elementAt(i))) {
//                intcolumn.addElement(DbTablesColB.elementAt(i));
//                intcolumnDes.addElement(DbTablesColDesB.elementAt(DbTablesColB.indexOf(DbTablesColB.elementAt(i))));
//            }
//        }
//
//        System.out.println("mi i want to display some things hhere o");
//        for (int j = 0; j < intcolumn.size(); j++) {
//            System.out.println(intcolumn.elementAt(j) + " " + intcolumnDes.elementAt(j));
//        }

        if (DbTablesColA.size() == DbTablesColB.size()) {
            for (int i = 0; i < DbTablesColB.size(); i++) {
                intcolumn.addElement(DbTablesColB.elementAt(i));
                intcolumnDes.addElement(DbTablesColDesB.elementAt(DbTablesColB.indexOf(DbTablesColB.elementAt(i))));
            }

            for (int i = 0; i < DbTablesColA.size(); i++) {
                if (!intcolumn.contains(DbTablesColA.elementAt(i))) {
                    intcolumn.addElement(DbTablesColA.elementAt(i));
                    intcolumnDes.addElement(DbTablesColDesA.elementAt(DbTablesColA.indexOf(DbTablesColA.elementAt(i))));
                }
            }
            return true;
        } else {
            JOptionPane.showMessageDialog(rootPane, "ROWS ON BOTH TABLES DOES NOT MATCH!");
            return false;
        }
    }

    public Object getContentSpec(int index, String dbname, String table, String sql, String psql) {
        String new_sql = "";
        String query_sql = sql;
        String final_query = "Select * From " + table + " where";
        try {
            connect_mysql db = new connect_mysql();
            db.postConnection("FPI_Student");
            db.rs = db.st.executeQuery(psql);
            ResultSetMetaData md = db.rs.getMetaData();

            int nColumns = md.getColumnCount();

            System.out.println(nColumns);
            while (db.rs.next()) {
                sql = query_sql;
                for (int i = 1; i <= nColumns; i++) {
                    sql = " " + sql.replaceFirst("=!", "='" + db.rs.getString(i) + "' AND ");
                }
                sql = sql.substring(0, sql.length() - 5);
                new_sql += sql + ") OR ";

            }
            connect_mysql db2 = new connect_mysql();
            db2.getConnection(dbname);
            final_query += new_sql.substring(0, new_sql.length() - 4);
            db2.rs = db2.st.executeQuery(final_query);
            md = db2.rs.getMetaData();
            int x = md.getColumnCount();
            String data[];
            while (db2.rs.next()) {
                data = new String[x];
                for (int i = 1; i <= x; i++) {
                    data[i - 1] = db2.rs.getString(i);
                    System.out.println("result rs" + db2.rs.getString(i));
                }
                tab1.addRow(data);
            }
            System.out.println(final_query);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("addobject " + e);
        }
        return value;

    }
}
